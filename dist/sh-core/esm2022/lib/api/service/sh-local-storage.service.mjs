import { Injectable } from '@angular/core';
import { SHUtils } from '@sh/base';
import * as i0 from "@angular/core";
export class SHLocalStorageService {
    getObject(key) {
        SHUtils.notEmpty(key, "key");
        const dataStr = localStorage.getItem(key.trim());
        return !SHUtils.isNull(dataStr) ? JSON.parse(dataStr) : null;
    }
    setObject(key, data) {
        SHUtils.notEmpty(key, "key");
        SHUtils.notEmpty(data, "data");
        const jsonDataStr = JSON.stringify(data);
        localStorage.setItem(key.trim(), jsonDataStr);
    }
    getObjectProperty(ObjetKey, propertyKey) {
        SHUtils.notEmpty(ObjetKey, "ObjetKey");
        SHUtils.notEmpty(propertyKey, "propertyKey");
        const object = this.getObject(ObjetKey);
        if (SHUtils.isNull(object))
            return null;
        else {
            const property = object[propertyKey];
            return !SHUtils.isNull(property) ? property : null;
        }
    }
    setObjectProperty(ObjetKey, key, data) {
        SHUtils.notEmpty(ObjetKey, "ObjetKey");
        SHUtils.notEmpty(key, "key");
        SHUtils.notEmpty(data, "data");
        const map = new Map().set(key.trim(), data);
        localStorage.setItem(ObjetKey.trim(), JSON.stringify(map));
    }
    removeItem(key) {
        SHUtils.notEmpty(key, "key");
        return localStorage.removeItem(key.trim());
    }
    clear() {
        localStorage.clear();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SHLocalStorageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SHLocalStorageService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SHLocalStorageService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtbG9jYWwtc3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2gtY29yZS9zcmMvbGliL2FwaS9zZXJ2aWNlL3NoLWxvY2FsLXN0b3JhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxVQUFVLENBQUM7O0FBR2pDLE1BQU0sT0FBTyxxQkFBcUI7SUFFdkIsU0FBUyxDQUFDLEdBQVc7UUFDeEIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFN0IsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNqRCxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2xFLENBQUM7SUFFTSxTQUFTLENBQUMsR0FBVyxFQUFFLElBQVM7UUFDbkMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFL0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN4QyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU0saUJBQWlCLENBQUMsUUFBZ0IsRUFBRSxXQUFtQjtRQUMxRCxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN2QyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUU3QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLElBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQzthQUNsQyxDQUFDO1lBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN2RCxDQUFDO0lBQ0wsQ0FBQztJQUVNLGlCQUFpQixDQUFDLFFBQWdCLEVBQUUsR0FBVyxFQUFFLElBQVk7UUFDaEUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdkMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFL0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVDLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRU0sVUFBVSxDQUFDLEdBQVc7UUFDekIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFN0IsT0FBTyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTSxLQUFLO1FBQ1IsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7dUdBOUNRLHFCQUFxQjsyR0FBckIscUJBQXFCLGNBRFQsTUFBTTs7MkZBQ2xCLHFCQUFxQjtrQkFEakMsVUFBVTttQkFBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyaW1wb3J0IHtTSFV0aWxzfSBmcm9tICdAc2gvYmFzZSc7XHJcckBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxyZXhwb3J0IGNsYXNzIFNITG9jYWxTdG9yYWdlU2VydmljZSB7XHJcciAgICBwdWJsaWMgZ2V0T2JqZWN0KGtleTogc3RyaW5nKTogYW55IHtcciAgICAgICAgU0hVdGlscy5ub3RFbXB0eShrZXksIFwia2V5XCIpO1xyXHIgICAgICAgIGNvbnN0IGRhdGFTdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkudHJpbSgpKTtcciAgICAgICAgcmV0dXJuICFTSFV0aWxzLmlzTnVsbChkYXRhU3RyKSA/IEpTT04ucGFyc2UoZGF0YVN0ciEpIDogbnVsbDtcciAgICB9XHJcciAgICBwdWJsaWMgc2V0T2JqZWN0KGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkIHtcciAgICAgICAgU0hVdGlscy5ub3RFbXB0eShrZXksIFwia2V5XCIpO1xyICAgICAgICBTSFV0aWxzLm5vdEVtcHR5KGRhdGEsIFwiZGF0YVwiKTtcclxyICAgICAgICBjb25zdCBqc29uRGF0YVN0ciA9IEpTT04uc3RyaW5naWZ5KGRhdGEpXHIgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleS50cmltKCksIGpzb25EYXRhU3RyKTtcciAgICB9XHJcciAgICBwdWJsaWMgZ2V0T2JqZWN0UHJvcGVydHkoT2JqZXRLZXk6IHN0cmluZywgcHJvcGVydHlLZXk6IHN0cmluZyk6IGFueSB7XHIgICAgICAgIFNIVXRpbHMubm90RW1wdHkoT2JqZXRLZXksIFwiT2JqZXRLZXlcIik7XHIgICAgICAgIFNIVXRpbHMubm90RW1wdHkocHJvcGVydHlLZXksIFwicHJvcGVydHlLZXlcIik7XHJcciAgICAgICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5nZXRPYmplY3QoT2JqZXRLZXkpO1xyICAgICAgICBpZihTSFV0aWxzLmlzTnVsbChvYmplY3QpKSByZXR1cm4gbnVsbDtcciAgICAgICAgZWxzZSB7XHIgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IG9iamVjdFtwcm9wZXJ0eUtleV07XHIgICAgICAgICAgICByZXR1cm4gIVNIVXRpbHMuaXNOdWxsKHByb3BlcnR5KSA/IHByb3BlcnR5IDogbnVsbDtcciAgICAgICAgfVxyICAgIH1cclxyICAgIHB1YmxpYyBzZXRPYmplY3RQcm9wZXJ0eShPYmpldEtleTogc3RyaW5nLCBrZXk6IHN0cmluZywgZGF0YTogc3RyaW5nKTogdm9pZCB7XHIgICAgICAgIFNIVXRpbHMubm90RW1wdHkoT2JqZXRLZXksIFwiT2JqZXRLZXlcIik7XHIgICAgICAgIFNIVXRpbHMubm90RW1wdHkoa2V5LCBcImtleVwiKTtcciAgICAgICAgU0hVdGlscy5ub3RFbXB0eShkYXRhLCBcImRhdGFcIik7XHJcciAgICAgICAgY29uc3QgbWFwID0gbmV3IE1hcCgpLnNldChrZXkudHJpbSgpLCBkYXRhKTtcciAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oT2JqZXRLZXkudHJpbSgpLCBKU09OLnN0cmluZ2lmeShtYXApKTtcciAgICB9XHJcciAgICBwdWJsaWMgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IHZvaWQge1xyICAgICAgICBTSFV0aWxzLm5vdEVtcHR5KGtleSwgXCJrZXlcIik7XHJcciAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleS50cmltKCkpO1xyICAgIH1cclxyICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcciAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XHIgICAgfVxyfSJdfQ==