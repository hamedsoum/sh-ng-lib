import { Injectable } from '@angular/core';
import { SHUtils } from '../utils/sh-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class SHttpClientService {
    httpClient;
    apiBaseURL;
    constructor(httpClient, apiBaseURL) {
        this.httpClient = httpClient;
        SHUtils.notEmpty(apiBaseURL, "apiBaseURL");
        this.apiBaseURL = apiBaseURL.trim();
    }
    get(endpoint, parameters, httpHeaders) {
        return this.httpClient.get(endpoint, { headers: httpHeaders, params: parameters });
    }
    post(endpoint, body, httpHeaders, parameters) {
        return this.httpClient.post(endpoint, body, { headers: httpHeaders, params: parameters });
    }
    put(endpoint, body, parameters, httpHeaders) {
        return this.httpClient.put(endpoint, body, { headers: httpHeaders, params: parameters });
    }
    patch(endpoint, body, parameters, httpHeaders) {
        return this.httpClient.patch(endpoint, body, { headers: httpHeaders, params: parameters });
    }
    delete(endpoint, parameters, httpHeaders) {
        return this.httpClient.delete(endpoint, { headers: httpHeaders, params: parameters });
    }
    setAPIBaseURL(apiBaseURL) {
        SHUtils.notEmpty(apiBaseURL, 'apiBaseURL');
        //TODO:
        // this.apiBaseURL = XSUtils.removeLastChar(apiBaseURL, '/') + '/';
        this.apiBaseURL = apiBaseURL;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SHttpClientService, deps: "invalid", target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SHttpClientService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SHttpClientService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: undefined }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtaHR0cC1jbGllbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NoLWJhc2Uvc3JjL2xpYi9zZXJ2aWNlcy9zaC1odHRwLWNsaWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHekMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLG1CQUFtQixDQUFDOzs7QUFHMUMsTUFBTSxPQUFnQixrQkFBa0I7SUFJZDtJQUZ0QixVQUFVLENBQVU7SUFFcEIsWUFBc0IsVUFBc0IsRUFBRSxVQUFrQjtRQUExQyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFTSxHQUFHLENBQUksUUFBZ0IsRUFBRSxVQUF1QixFQUFFLFdBQXlCO1FBQzlFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUksUUFBUSxFQUFFLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRU0sSUFBSSxDQUFJLFFBQWdCLEVBQUUsSUFBUyxFQUFDLFdBQXlCLEVBQUUsVUFBdUI7UUFDekYsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBSSxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRU0sR0FBRyxDQUFJLFFBQWdCLEVBQUUsSUFBUyxFQUFFLFVBQXVCLEVBQUUsV0FBeUI7UUFDekYsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBSSxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRU0sS0FBSyxDQUFJLFFBQWdCLEVBQUUsSUFBVSxFQUFFLFVBQXVCLEVBQUUsV0FBeUI7UUFDNUYsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBSSxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRU0sTUFBTSxDQUFJLFFBQWdCLEVBQUUsVUFBdUIsRUFBRSxXQUF5QjtRQUNqRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFJLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVTLGFBQWEsQ0FBQyxVQUFrQjtRQUN0QyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUMzQyxPQUFPO1FBQ1AsbUVBQW1FO1FBQ25FLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQ2pDLENBQUM7dUdBbENpQixrQkFBa0I7MkdBQWxCLGtCQUFrQjs7MkZBQWxCLGtCQUFrQjtrQkFEdkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJpbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xyaW1wb3J0IHtIdHRwQ2xpZW50LCBIdHRwSGVhZGVycywgSHR0cFBhcmFtc30gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyaW1wb3J0IHtTSFV0aWxzfSBmcm9tICcuLi91dGlscy9zaC11dGlscyc7XHJcckBJbmplY3RhYmxlKClccmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTSHR0cENsaWVudFNlcnZpY2Uge1xyXHIgICAgYXBpQmFzZVVSTCA6IHN0cmluZztcclxyICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCBhcGlCYXNlVVJMOiBzdHJpbmcpIHtcciAgICAgICAgU0hVdGlscy5ub3RFbXB0eShhcGlCYXNlVVJMLCBcImFwaUJhc2VVUkxcIik7XHIgICAgICAgIHRoaXMuYXBpQmFzZVVSTCA9IGFwaUJhc2VVUkwudHJpbSgpO1xyICAgIH1cclxyICAgIHB1YmxpYyBnZXQ8VD4oZW5kcG9pbnQ6IHN0cmluZywgcGFyYW1ldGVycz86IEh0dHBQYXJhbXMsIGh0dHBIZWFkZXJzPzogSHR0cEhlYWRlcnMpOiBPYnNlcnZhYmxlPFQ+IHtcciAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8VD4oZW5kcG9pbnQsIHtoZWFkZXJzOiBodHRwSGVhZGVycywgcGFyYW1zOiBwYXJhbWV0ZXJzIH0pO1xyICAgIH1cclxyICAgIHB1YmxpYyBwb3N0PFQ+KGVuZHBvaW50OiBzdHJpbmcsIGJvZHk6IGFueSxodHRwSGVhZGVycz86IEh0dHBIZWFkZXJzLCBwYXJhbWV0ZXJzPzogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8VD4ge1xyICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8VD4oZW5kcG9pbnQsIGJvZHksIHtoZWFkZXJzOiBodHRwSGVhZGVycywgcGFyYW1zOiBwYXJhbWV0ZXJzIH0pO1xyICAgIH1cclxyICAgIHB1YmxpYyBwdXQ8VD4oZW5kcG9pbnQ6IHN0cmluZywgYm9keTogYW55LCBwYXJhbWV0ZXJzPzogSHR0cFBhcmFtcywgaHR0cEhlYWRlcnM/OiBIdHRwSGVhZGVycyk6IE9ic2VydmFibGU8VD4ge1xyICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnB1dDxUPihlbmRwb2ludCwgYm9keSwge2hlYWRlcnM6IGh0dHBIZWFkZXJzLCBwYXJhbXM6IHBhcmFtZXRlcnMgfSk7XHIgICAgfVxyXHIgICAgcHVibGljIHBhdGNoPFQ+KGVuZHBvaW50OiBzdHJpbmcsIGJvZHk/OiBhbnksIHBhcmFtZXRlcnM/OiBIdHRwUGFyYW1zLCBodHRwSGVhZGVycz86IEh0dHBIZWFkZXJzKTogT2JzZXJ2YWJsZTxUPiB7XHIgICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucGF0Y2g8VD4oZW5kcG9pbnQsIGJvZHksIHtoZWFkZXJzOiBodHRwSGVhZGVycywgcGFyYW1zOiBwYXJhbWV0ZXJzIH0pO1xyICAgIH1cclxyICAgIHB1YmxpYyBkZWxldGU8VD4oZW5kcG9pbnQ6IHN0cmluZywgcGFyYW1ldGVycz86IEh0dHBQYXJhbXMsIGh0dHBIZWFkZXJzPzogSHR0cEhlYWRlcnMpOiBPYnNlcnZhYmxlPFQ+IHtcciAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5kZWxldGU8VD4oZW5kcG9pbnQsIHsgaGVhZGVyczogaHR0cEhlYWRlcnMsIHBhcmFtczogcGFyYW1ldGVycyB9KTtcciAgICB9XHJcciAgICBwcm90ZWN0ZWQgc2V0QVBJQmFzZVVSTChhcGlCYXNlVVJMOiBzdHJpbmcpOiB2b2lkIHtcciAgICAgICAgU0hVdGlscy5ub3RFbXB0eShhcGlCYXNlVVJMLCAnYXBpQmFzZVVSTCcpO1xyICAgICAgICAvL1RPRE86XHIgICAgICAgIC8vIHRoaXMuYXBpQmFzZVVSTCA9IFhTVXRpbHMucmVtb3ZlTGFzdENoYXIoYXBpQmFzZVVSTCwgJy8nKSArICcvJztcciAgICAgICAgdGhpcy5hcGlCYXNlVVJMID0gYXBpQmFzZVVSTDtcciAgICB9XHJ9XHIiXX0=