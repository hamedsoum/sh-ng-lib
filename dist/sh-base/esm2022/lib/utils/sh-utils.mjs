import { HttpParams } from '@angular/common/http';
import { v4 as uuidv4 } from 'uuid';
export class SHUtils {
    static uuid() {
        return uuidv4();
    }
    static isEmpty(obj) {
        if (SHUtils.isNull(obj)) {
            return true;
        }
        if (SHUtils.isString(obj) && obj.trim().length === 0) {
            return true;
        }
        if (obj instanceof Map || obj instanceof Set) {
            return obj.size === 0;
        }
        if (Array.isArray(obj) && obj.length === 0) {
            return true;
        }
        return Object.keys(obj).length === 0 && obj.constructor === Object;
    }
    static isNull(obj) {
        return obj === null || obj === undefined;
    }
    static isString(obj) {
        if (SHUtils.isNull(obj)) {
            return false;
        }
        return typeof obj === 'string' || obj instanceof String;
    }
    static notNull(obj, varName) {
        if (SHUtils.isNull(obj)) {
            throw new Error((!SHUtils.isEmpty(varName) ? varName : 'The given variable') + ' must not be null.');
        }
    }
    static notEmpty(obj, varName) {
        if (SHUtils.isEmpty(obj)) {
            throw new Error((!SHUtils.isEmpty(varName) ? varName : 'The given variable') + ' must not be empty or null.');
        }
    }
    static isMap(obj) {
        return obj instanceof Map;
    }
    static convertMapToObject(map) {
        if (SHUtils.isNull(map) || !SHUtils.isMap(map)) {
            throw new Error('map must be a non null instance of Map.');
        }
        return Object.fromEntries(map);
    }
    static toHttpParameters(obj, fields) {
        let params = new HttpParams();
        if (!SHUtils.isEmpty(obj)) {
            for (const [key, value] of Object.entries(obj)) {
                let pValue = value;
                params = params.set(key, pValue);
            }
        }
        if (!SHUtils.isEmpty(fields))
            params = params.set('fields', fields.join(','));
        return params;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zaC1iYXNlL3NyYy9saWIvdXRpbHMvc2gtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxFQUFFLElBQUksTUFBTSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRWxDLE1BQU0sT0FBTyxPQUFPO0lBRVQsTUFBTSxDQUFDLElBQUk7UUFDZCxPQUFPLE1BQU0sRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQVE7UUFDMUIsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUNELElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ25ELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxJQUFJLEdBQUcsWUFBWSxHQUFHLElBQUksR0FBRyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQzNDLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7UUFDMUIsQ0FBQztRQUNELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3pDLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsV0FBVyxLQUFLLE1BQU0sQ0FBQztJQUVuRSxDQUFDO0lBRUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFRO1FBQ3pCLE9BQU8sR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLEtBQUssU0FBUyxDQUFDO0lBQzdDLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQVE7UUFDM0IsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDdEIsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQztRQUNELE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsWUFBWSxNQUFNLENBQUM7SUFDNUQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBUSxFQUFFLE9BQWdCO1FBQzVDLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFFLE9BQVEsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzVHLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFRLEVBQUUsT0FBZ0I7UUFDN0MsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUUsT0FBUSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLDZCQUE2QixDQUFDLENBQUM7UUFDckgsQ0FBQztJQUNMLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQVE7UUFDeEIsT0FBTyxHQUFHLFlBQVksR0FBRyxDQUFDO0lBQzlCLENBQUM7SUFFTSxNQUFNLENBQUMsa0JBQWtCLENBQUMsR0FBa0I7UUFDL0MsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzdDLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztRQUMvRCxDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsR0FBUSxFQUFFLE1BQWlCO1FBQ3RELElBQUksTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN4QixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFJLENBQUMsRUFBRSxDQUFDO2dCQUM5QyxJQUFJLE1BQU0sR0FBUSxLQUFLLENBQUM7Z0JBQ3hCLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyQyxDQUFDO1FBQ0wsQ0FBQztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUFFLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0UsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIdHRwUGFyYW1zfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJpbXBvcnQge3Y0IGFzIHV1aWR2NH0gZnJvbSAndXVpZCc7XHJccmV4cG9ydCBjbGFzcyBTSFV0aWxzIHtcclxyICAgIHB1YmxpYyBzdGF0aWMgdXVpZCgpOiBzdHJpbmcge1xyICAgICAgICByZXR1cm4gdXVpZHY0KCk7XHIgICAgfVxyXHIgICAgcHVibGljIHN0YXRpYyBpc0VtcHR5KG9iajogYW55KTogYm9vbGVhbiB7XHIgICAgICAgIGlmIChTSFV0aWxzLmlzTnVsbChvYmopKSB7XHIgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcciAgICAgICAgfVxyICAgICAgICBpZiAoU0hVdGlscy5pc1N0cmluZyhvYmopICYmIG9iai50cmltKCkubGVuZ3RoID09PSAwKSB7XHIgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcciAgICAgICAgfVxyICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgTWFwIHx8IG9iaiBpbnN0YW5jZW9mIFNldCkge1xyICAgICAgICAgICAgcmV0dXJuIG9iai5zaXplID09PSAwO1xyICAgICAgICB9XHIgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikgJiYgb2JqLmxlbmd0aCA9PT0gMCkge1xyICAgICAgICAgICAgcmV0dXJuIHRydWU7XHIgICAgICAgIH1cciAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xyXHIgICAgICAgIH1cclxyICAgIHB1YmxpYyBzdGF0aWMgaXNOdWxsKG9iajogYW55KTogYm9vbGVhbiB7XHIgICAgICAgIHJldHVybiBvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQ7XHIgICAgfVxyXHIgICAgcHVibGljIHN0YXRpYyBpc1N0cmluZyhvYmo6IGFueSk6IGJvb2xlYW4ge1xyICAgICAgICBpZiAoU0hVdGlscy5pc051bGwob2JqKSkge1xyICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyICAgICAgICB9XHIgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fCBvYmogaW5zdGFuY2VvZiBTdHJpbmc7XHIgICAgfVxyXHIgICAgcHVibGljIHN0YXRpYyBub3ROdWxsKG9iajogYW55LCB2YXJOYW1lPzogc3RyaW5nKTogdm9pZCB7XHIgICAgICAgIGlmIChTSFV0aWxzLmlzTnVsbChvYmopKSB7XHIgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICghU0hVdGlscy5pc0VtcHR5KHZhck5hbWUpID8gIHZhck5hbWUhIDogJ1RoZSBnaXZlbiB2YXJpYWJsZScpICsgJyBtdXN0IG5vdCBiZSBudWxsLicpO1xyICAgICAgICB9XHIgICAgfVxyXHIgICAgcHVibGljIHN0YXRpYyBub3RFbXB0eShvYmo6IGFueSwgdmFyTmFtZT86IHN0cmluZyk6IHZvaWQge1xyICAgICAgICBpZiAoU0hVdGlscy5pc0VtcHR5KG9iaikpIHtcciAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggKCFTSFV0aWxzLmlzRW1wdHkodmFyTmFtZSkgPyAgdmFyTmFtZSEgOiAnVGhlIGdpdmVuIHZhcmlhYmxlJykgKyAnIG11c3Qgbm90IGJlIGVtcHR5IG9yIG51bGwuJyk7XHIgICAgICAgIH1cciAgICB9XHJcciAgICBwdWJsaWMgc3RhdGljIGlzTWFwKG9iajogYW55KTogYm9vbGVhbiB7XHIgICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBNYXA7XHIgICAgfVxyXHIgICAgcHVibGljIHN0YXRpYyBjb252ZXJ0TWFwVG9PYmplY3QobWFwOiBNYXA8YW55LCBhbnk+KToge30ge1xyICAgICAgICBpZiAoU0hVdGlscy5pc051bGwobWFwKSB8fCAhU0hVdGlscy5pc01hcChtYXApKSB7XHIgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcCBtdXN0IGJlIGEgbm9uIG51bGwgaW5zdGFuY2Ugb2YgTWFwLicpO1xyICAgICAgICB9XHIgICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMobWFwKTtcciAgICB9XHJcciAgICBwdWJsaWMgc3RhdGljIHRvSHR0cFBhcmFtZXRlcnMob2JqOiBhbnksIGZpZWxkcz86IHN0cmluZ1tdKTogSHR0cFBhcmFtcyB7XHIgICAgICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xyICAgICAgICBpZiAoIVNIVXRpbHMuaXNFbXB0eShvYmopKSB7XHIgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmohKSkge1xyICAgICAgICAgICAgICAgIGxldCBwVmFsdWU6IGFueSA9IHZhbHVlO1xyICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcy5zZXQoa2V5LCBwVmFsdWUpO1xyICAgICAgICAgICAgfVxyICAgICAgICB9XHIgICAgICAgIGlmICghU0hVdGlscy5pc0VtcHR5KGZpZWxkcykpIHBhcmFtcyA9IHBhcmFtcy5zZXQoJ2ZpZWxkcycsIGZpZWxkcyEuam9pbignLCcpKTtcciAgICAgICAgcmV0dXJuIHBhcmFtcztcciAgICB9XHJccn1cciJdfQ==