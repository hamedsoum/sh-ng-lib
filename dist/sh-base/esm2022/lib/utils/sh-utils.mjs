import { HttpParams } from '@angular/common/http';
export class SHUtils {
    static isEmpty(obj) {
        if (SHUtils.isNull(obj)) {
            return true;
        }
        if (SHUtils.isString(obj) && obj.trim().length === 0) {
            return true;
        }
        if (obj instanceof Map || obj instanceof Set) {
            return obj.size === 0;
        }
        if (Array.isArray(obj) && obj.length === 0) {
            return true;
        }
        return Object.keys(obj).length === 0 && obj.constructor === Object;
    }
    static isNull(obj) {
        return obj === null || obj === undefined;
    }
    static isString(obj) {
        if (SHUtils.isNull(obj)) {
            return false;
        }
        return typeof obj === 'string' || obj instanceof String;
    }
    static notNull(obj, varName) {
        if (SHUtils.isNull(obj)) {
            throw new Error((!SHUtils.isEmpty(varName) ? varName : 'The given variable') + ' must not be null.');
        }
    }
    static notEmpty(obj, varName) {
        if (SHUtils.isEmpty(obj)) {
            throw new Error((!SHUtils.isEmpty(varName) ? varName : 'The given variable') + ' must not be empty or null.');
        }
    }
    static isMap(obj) {
        return obj instanceof Map;
    }
    static convertMapToObject(map) {
        if (SHUtils.isNull(map) || !SHUtils.isMap(map)) {
            throw new Error('map must be a non null instance of Map.');
        }
        return Object.fromEntries(map);
    }
    static toHttpParameters(obj, fields) {
        let params = new HttpParams();
        if (!SHUtils.isEmpty(obj)) {
            for (const [key, value] of Object.entries(obj)) {
                let pValue = value;
                params = params.set(key, pValue);
            }
        }
        if (!SHUtils.isEmpty(fields))
            params = params.set('fields', fields.join(','));
        return params;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zaC1iYXNlL3NyYy9saWIvdXRpbHMvc2gtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRWhELE1BQU0sT0FBTyxPQUFPO0lBRVQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFRO1FBQzFCLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3RCLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNuRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQ0QsSUFBSSxHQUFHLFlBQVksR0FBRyxJQUFJLEdBQUcsWUFBWSxHQUFHLEVBQUUsQ0FBQztZQUMzQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDO1FBQzFCLENBQUM7UUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN6QyxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLFdBQVcsS0FBSyxNQUFNLENBQUM7SUFFbkUsQ0FBQztJQUVFLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBUTtRQUN6QixPQUFPLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFRO1FBQzNCLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3RCLE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUM7UUFDRCxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLFlBQVksTUFBTSxDQUFDO0lBQzVELENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQVEsRUFBRSxPQUFnQjtRQUM1QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN0QixNQUFNLElBQUksS0FBSyxDQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBRSxPQUFRLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztRQUM1RyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBUSxFQUFFLE9BQWdCO1FBQzdDLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFFLE9BQVEsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ3JILENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFRO1FBQ3hCLE9BQU8sR0FBRyxZQUFZLEdBQUcsQ0FBQztJQUM5QixDQUFDO0lBRU0sTUFBTSxDQUFDLGtCQUFrQixDQUFDLEdBQWtCO1FBQy9DLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUM3QyxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7UUFDL0QsQ0FBQztRQUNELE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sTUFBTSxDQUFDLGdCQUFnQixDQUFDLEdBQVEsRUFBRSxNQUFpQjtRQUN0RCxJQUFJLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDeEIsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBSSxDQUFDLEVBQUUsQ0FBQztnQkFDOUMsSUFBSSxNQUFNLEdBQVEsS0FBSyxDQUFDO2dCQUN4QixNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDckMsQ0FBQztRQUNMLENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFBRSxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQy9FLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cFBhcmFtc30gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXHJleHBvcnQgY2xhc3MgU0hVdGlscyB7XHJcciAgICBwdWJsaWMgc3RhdGljIGlzRW1wdHkob2JqOiBhbnkpOiBib29sZWFuIHtcciAgICAgICAgaWYgKFNIVXRpbHMuaXNOdWxsKG9iaikpIHtcciAgICAgICAgICAgIHJldHVybiB0cnVlO1xyICAgICAgICB9XHIgICAgICAgIGlmIChTSFV0aWxzLmlzU3RyaW5nKG9iaikgJiYgb2JqLnRyaW0oKS5sZW5ndGggPT09IDApIHtcciAgICAgICAgICAgIHJldHVybiB0cnVlO1xyICAgICAgICB9XHIgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBNYXAgfHwgb2JqIGluc3RhbmNlb2YgU2V0KSB7XHIgICAgICAgICAgICByZXR1cm4gb2JqLnNpemUgPT09IDA7XHIgICAgICAgIH1cciAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID09PSAwKSB7XHIgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcciAgICAgICAgfVxyICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDAgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XHJcciAgICAgICAgfVxyXHIgICAgcHVibGljIHN0YXRpYyBpc051bGwob2JqOiBhbnkpOiBib29sZWFuIHtcciAgICAgICAgcmV0dXJuIG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZDtcciAgICB9XHJcciAgICBwdWJsaWMgc3RhdGljIGlzU3RyaW5nKG9iajogYW55KTogYm9vbGVhbiB7XHIgICAgICAgIGlmIChTSFV0aWxzLmlzTnVsbChvYmopKSB7XHIgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHIgICAgICAgIH1cciAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdzdHJpbmcnIHx8IG9iaiBpbnN0YW5jZW9mIFN0cmluZztcciAgICB9XHJcciAgICBwdWJsaWMgc3RhdGljIG5vdE51bGwob2JqOiBhbnksIHZhck5hbWU/OiBzdHJpbmcpOiB2b2lkIHtcciAgICAgICAgaWYgKFNIVXRpbHMuaXNOdWxsKG9iaikpIHtcciAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggKCFTSFV0aWxzLmlzRW1wdHkodmFyTmFtZSkgPyAgdmFyTmFtZSEgOiAnVGhlIGdpdmVuIHZhcmlhYmxlJykgKyAnIG11c3Qgbm90IGJlIG51bGwuJyk7XHIgICAgICAgIH1cciAgICB9XHJcciAgICBwdWJsaWMgc3RhdGljIG5vdEVtcHR5KG9iajogYW55LCB2YXJOYW1lPzogc3RyaW5nKTogdm9pZCB7XHIgICAgICAgIGlmIChTSFV0aWxzLmlzRW1wdHkob2JqKSkge1xyICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAoIVNIVXRpbHMuaXNFbXB0eSh2YXJOYW1lKSA/ICB2YXJOYW1lISA6ICdUaGUgZ2l2ZW4gdmFyaWFibGUnKSArICcgbXVzdCBub3QgYmUgZW1wdHkgb3IgbnVsbC4nKTtcciAgICAgICAgfVxyICAgIH1cclxyICAgIHB1YmxpYyBzdGF0aWMgaXNNYXAob2JqOiBhbnkpOiBib29sZWFuIHtcciAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1hcDtcciAgICB9XHJcciAgICBwdWJsaWMgc3RhdGljIGNvbnZlcnRNYXBUb09iamVjdChtYXA6IE1hcDxhbnksIGFueT4pOiB7fSB7XHIgICAgICAgIGlmIChTSFV0aWxzLmlzTnVsbChtYXApIHx8ICFTSFV0aWxzLmlzTWFwKG1hcCkpIHtcciAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWFwIG11c3QgYmUgYSBub24gbnVsbCBpbnN0YW5jZSBvZiBNYXAuJyk7XHIgICAgICAgIH1cciAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhtYXApO1xyICAgIH1cclxyICAgIHB1YmxpYyBzdGF0aWMgdG9IdHRwUGFyYW1ldGVycyhvYmo6IGFueSwgZmllbGRzPzogc3RyaW5nW10pOiBIdHRwUGFyYW1zIHtcciAgICAgICAgbGV0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XHIgICAgICAgIGlmICghU0hVdGlscy5pc0VtcHR5KG9iaikpIHtcciAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaiEpKSB7XHIgICAgICAgICAgICAgICAgbGV0IHBWYWx1ZTogYW55ID0gdmFsdWU7XHIgICAgICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zLnNldChrZXksIHBWYWx1ZSk7XHIgICAgICAgICAgICB9XHIgICAgICAgIH1cciAgICAgICAgaWYgKCFTSFV0aWxzLmlzRW1wdHkoZmllbGRzKSkgcGFyYW1zID0gcGFyYW1zLnNldCgnZmllbGRzJywgZmllbGRzIS5qb2luKCcsJykpO1xyICAgICAgICByZXR1cm4gcGFyYW1zO1xyICAgIH1cclxyfVxyIl19