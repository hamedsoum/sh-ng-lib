import { SHUtils } from '@sh/base';
import { XS_STORAGE_KEY_TOKEN, XS_STORAGE_KEY_USER } from '../constant/sh-authentication-constant';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@sh/base";
import * as i2 from "@angular/router";
export class SHAuthenticationBaseService {
    http;
    router;
    token;
    loggedInUsername;
    constructor(http, router) {
        this.http = http;
        this.router = router;
    }
    login(request) {
        console.log(" ===| Login function call from authentication library service |===");
        return this.http.post(this.getEndpoint().login, request);
    }
    register(user) {
        return this.http.post(this.getEndpoint().register, user);
    }
    logOut() {
        this.token = undefined;
        this.loggedInUsername = undefined;
        localStorage.removeItem(XS_STORAGE_KEY_USER);
        // localStorage.removeItem('token');
        sessionStorage.removeItem(XS_STORAGE_KEY_TOKEN);
        localStorage.removeItem(XS_STORAGE_KEY_USER);
        this.router.navigate([this.getRoute().login]).then();
    }
    saveToken(token) {
        this.token = token;
        this.loggedInUsername = undefined;
        // localStorage.setItem('token', token);
        sessionStorage.setItem(XS_STORAGE_KEY_TOKEN, token);
    }
    addUserToLocalStorage(user) {
        localStorage.setItem(XS_STORAGE_KEY_USER, JSON.stringify(user));
    }
    getUserFromLocalStorage() {
        return !SHUtils.isEmpty(localStorage.getItem(XS_STORAGE_KEY_USER)) ? JSON.parse(localStorage.getItem('user')) : undefined;
    }
    loadToken() {
        // this.token = localStorage.getItem('token');
        if (!SHUtils.isEmpty(sessionStorage.getItem(XS_STORAGE_KEY_TOKEN)))
            this.token = sessionStorage.getItem('token');
    }
    getToken() {
        return this.token;
    }
    isAuthenticate() {
        this.loadToken();
        // if (!SHUtils.isEmpty(this.token)) {
        //   if (!SHUtils.isEmpty(jwt_decode(this.token!).sub)) {
        //       this.loggedInUsername = jwt_decode(this.token!)!;
        //       return true;
        //     }
        //   }
        this.logOut();
        return false;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SHAuthenticationBaseService, deps: [{ token: i1.SHttpClientService }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SHAuthenticationBaseService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SHAuthenticationBaseService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.SHttpClientService }, { type: i2.Router }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtYXV0aGVudGljYXRpb24tYmFzZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2gtYXV0aGVudGljYXRpb24vc3JjL2xpYi9hcGkvc2VydmljZXMvc2gtYXV0aGVudGljYXRpb24tYmFzZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBUyxPQUFPLEVBQTZGLE1BQU0sVUFBVSxDQUFDO0FBRXJJLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pHLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7QUFHekMsTUFBTSxPQUFnQiwyQkFBMkI7SUFRekI7SUFBb0M7SUFObEQsS0FBSyxDQUFVO0lBQ2YsZ0JBQWdCLENBQVU7SUFLbEMsWUFBc0IsSUFBd0IsRUFBWSxNQUFjO1FBQWxELFNBQUksR0FBSixJQUFJLENBQW9CO1FBQVksV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFJLENBQUM7SUFFdEUsS0FBSyxDQUFDLE9BQWlGO1FBQzVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0VBQW9FLENBQUMsQ0FBQztRQUNsRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUF1QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFTSxRQUFRLENBQUMsSUFBWTtRQUMxQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUF1QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7UUFDdkIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQztRQUNsQyxZQUFZLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDN0Msb0NBQW9DO1FBQ3BDLGNBQWMsQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNoRCxZQUFZLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUV2RCxDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQWE7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQztRQUNsQyx3Q0FBd0M7UUFDeEMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRU0scUJBQXFCLENBQUMsSUFBWTtRQUN2QyxZQUFZLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU0sdUJBQXVCO1FBQzVCLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUUsU0FBUyxDQUFDO0lBQzlILENBQUM7SUFFTSxTQUFTO1FBQ2QsOENBQThDO1FBQzlDLElBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUUsQ0FBQztJQUNwSCxDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRU0sY0FBYztRQUNuQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDaEIsc0NBQXNDO1FBQ3RDLHlEQUF5RDtRQUN6RCwwREFBMEQ7UUFDMUQscUJBQXFCO1FBQ3JCLFFBQVE7UUFDUixNQUFNO1FBRUosSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzt1R0FqRW1CLDJCQUEyQjsyR0FBM0IsMkJBQTJCOzsyRkFBM0IsMkJBQTJCO2tCQURoRCxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCdcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7U0hBdXRoZW50aWNhdGlvbkVuZHBvaW50LCBTSEF1dGhlbnRpY2F0aW9uUm91dGV9IGZyb20gJy4uL2RvbWFpbi9zaC1hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQge1NIVXNlciwgU0hVdGlscyxTSHR0cENsaWVudFNlcnZpY2UsIFNIQXV0aGVudGljYXRpb25Vc2VybmFtZVBhc3N3b3JkUmVxdWVzdCwgWFNBdXRoZW50aWNhdGlvblBJTkNvZGVSZXF1ZXN0fSBmcm9tICdAc2gvYmFzZSc7XG5pbXBvcnQge1JvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7WFNfU1RPUkFHRV9LRVlfVE9LRU4sIFhTX1NUT1JBR0VfS0VZX1VTRVJ9IGZyb20gJy4uL2NvbnN0YW50L3NoLWF1dGhlbnRpY2F0aW9uLWNvbnN0YW50JztcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTSEF1dGhlbnRpY2F0aW9uQmFzZVNlcnZpY2Uge1xuXG4gIHByaXZhdGUgdG9rZW4/OiBzdHJpbmc7XG4gIHByaXZhdGUgbG9nZ2VkSW5Vc2VybmFtZT86IHN0cmluZztcblxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RW5kcG9pbnQoKTogU0hBdXRoZW50aWNhdGlvbkVuZHBvaW50O1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0Um91dGUoKTogU0hBdXRoZW50aWNhdGlvblJvdXRlO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBodHRwOiBTSHR0cENsaWVudFNlcnZpY2UsIHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlcikgeyB9XG5cbiAgcHVibGljIGxvZ2luKHJlcXVlc3Q6IFNIQXV0aGVudGljYXRpb25Vc2VybmFtZVBhc3N3b3JkUmVxdWVzdCB8IFhTQXV0aGVudGljYXRpb25QSU5Db2RlUmVxdWVzdCk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFNIVXNlcj4+IHtcbiAgICBjb25zb2xlLmxvZyhcIiA9PT18IExvZ2luIGZ1bmN0aW9uIGNhbGwgZnJvbSBhdXRoZW50aWNhdGlvbiBsaWJyYXJ5IHNlcnZpY2UgfD09PVwiKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8SHR0cFJlc3BvbnNlPFNIVXNlcj4+KHRoaXMuZ2V0RW5kcG9pbnQoKS5sb2dpbiwgcmVxdWVzdCk7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXIodXNlcjogU0hVc2VyKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8U0hVc2VyPj4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxIdHRwUmVzcG9uc2U8U0hVc2VyPj4odGhpcy5nZXRFbmRwb2ludCgpLnJlZ2lzdGVyLCB1c2VyKTtcbiAgfVxuXG4gIHB1YmxpYyBsb2dPdXQoKTogdm9pZCB7XG4gICAgdGhpcy50b2tlbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxvZ2dlZEluVXNlcm5hbWUgPSB1bmRlZmluZWQ7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oWFNfU1RPUkFHRV9LRVlfVVNFUik7XG4gICAgLy8gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Rva2VuJyk7XG4gICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShYU19TVE9SQUdFX0tFWV9UT0tFTik7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oWFNfU1RPUkFHRV9LRVlfVVNFUik7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW3RoaXMuZ2V0Um91dGUoKS5sb2dpbl0pLnRoZW4oKTtcblxuICB9XG5cbiAgcHVibGljIHNhdmVUb2tlbih0b2tlbjogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIHRoaXMubG9nZ2VkSW5Vc2VybmFtZSA9IHVuZGVmaW5lZDtcbiAgICAvLyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9rZW4nLCB0b2tlbik7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShYU19TVE9SQUdFX0tFWV9UT0tFTiwgdG9rZW4pO1xuICB9XG5cbiAgcHVibGljIGFkZFVzZXJUb0xvY2FsU3RvcmFnZSh1c2VyOiBTSFVzZXIpOiB2b2lkIHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShYU19TVE9SQUdFX0tFWV9VU0VSLCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0VXNlckZyb21Mb2NhbFN0b3JhZ2UoKTogU0hVc2VyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gIVNIVXRpbHMuaXNFbXB0eShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShYU19TVE9SQUdFX0tFWV9VU0VSKSkgPyBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJykhKSA6ICB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgbG9hZFRva2VuKCk6IHZvaWQge1xuICAgIC8vIHRoaXMudG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTtcbiAgICBpZighU0hVdGlscy5pc0VtcHR5KHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oWFNfU1RPUkFHRV9LRVlfVE9LRU4pKSkgIHRoaXMudG9rZW4gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpITtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUb2tlbigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnRva2VuO1xuICB9XG5cbiAgcHVibGljIGlzQXV0aGVudGljYXRlKCk6IGJvb2xlYW4ge1xuICAgIHRoaXMubG9hZFRva2VuKClcbiAgICAvLyBpZiAoIVNIVXRpbHMuaXNFbXB0eSh0aGlzLnRva2VuKSkge1xuICAgIC8vICAgaWYgKCFTSFV0aWxzLmlzRW1wdHkoand0X2RlY29kZSh0aGlzLnRva2VuISkuc3ViKSkge1xuICAgIC8vICAgICAgIHRoaXMubG9nZ2VkSW5Vc2VybmFtZSA9IGp3dF9kZWNvZGUodGhpcy50b2tlbiEpITtcbiAgICAvLyAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfVxuXG4gICAgICB0aGlzLmxvZ091dCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXX0=