import {Injectable} from '@angular/core';import {Observable} from 'rxjs';import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';import {SHHttpMethod} from '../domain/sh-base';@Injectable()export abstract class SHttpClientService {    constructor(protected httpClient: HttpClient) {    }    // public request<T>(method: SHHttpMethod, endpoint: string, options: {}): Observable<T> {    //     ShUtils.notEmpty(method, 'method');    //     return this.httpClient.request<T>(method.toString(), endpoint, options);    // }    //    // public get<T>(endpoint: string, parameters?: HttpParams, httpHeaders?: HttpHeaders, nativeOptions?: any): Observable<T> {    //     return this.httpClient.get<T>(this.buildEndpoint(endpoint), this.buildOptions(parameters, httpHeaders, nativeOptions));    // }    //    public post<T>(endpoint: string, body: any, parameters?: HttpParams, httpHeaders?: HttpHeaders, nativeOptions?: any): Observable<T> {        return this.httpClient.post<T>(endpoint, body, {});    }    //    // public put<T>(endpoint: string, body: any, parameters?: HttpParams, httpHeaders?: HttpHeaders, nativeOptions?: any): Observable<T> {    //     return this.httpClient.put<T>(this.buildEndpoint(endpoint), body, this.buildOptions(parameters, httpHeaders, nativeOptions));    // }    //    // public patch<T>(endpoint: string, body?: any, parameters?: HttpParams, httpHeaders?: HttpHeaders, nativeOptions?: any): Observable<T> {    //     return this.httpClient.patch<T>(this.buildEndpoint(endpoint), body, this.buildOptions(parameters, httpHeaders, nativeOptions));    // }    //    // public delete<T>(endpoint: string, parameters?: HttpParams, httpHeaders?: HttpHeaders, nativeOptions?: any): Observable<T> {    //     return this.httpClient.delete<T>(this.buildEndpoint(endpoint), this.buildOptions(parameters, httpHeaders, nativeOptions));    // }}