import {Injectable} from '@angular/core';import {Observable} from 'rxjs';import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';import {SHUtils} from '../utils/sh-utils';@Injectable()export abstract class SHttpClientService {    apiBaseURL : string;    constructor(protected httpClient: HttpClient, apiBaseURL: string) {        SHUtils.notEmpty(apiBaseURL, "apiBaseURL");        this.apiBaseURL = apiBaseURL.trim();    }    public get<T>(endpoint: string, parameters?: HttpParams, httpHeaders?: HttpHeaders): Observable<T> {        return this.httpClient.get<T>(endpoint, {headers: httpHeaders, params: parameters });    }    public post<T>(endpoint: string, body: any,httpHeaders?: HttpHeaders, parameters?: HttpParams): Observable<T> {        return this.httpClient.post<T>(endpoint, body, {headers: httpHeaders, params: parameters });    }    public put<T>(endpoint: string, body: any, parameters?: HttpParams, httpHeaders?: HttpHeaders): Observable<T> {        return this.httpClient.put<T>(endpoint, body, {headers: httpHeaders, params: parameters });    }    public patch<T>(endpoint: string, body?: any, parameters?: HttpParams, httpHeaders?: HttpHeaders): Observable<T> {        return this.httpClient.patch<T>(endpoint, body, {headers: httpHeaders, params: parameters });    }    public delete<T>(endpoint: string, parameters?: HttpParams, httpHeaders?: HttpHeaders): Observable<T> {        return this.httpClient.delete<T>(endpoint, { headers: httpHeaders, params: parameters });    }    protected setAPIBaseURL(apiBaseURL: string): void {        SHUtils.notEmpty(apiBaseURL, 'apiBaseURL');        //TODO:        // this.apiBaseURL = XSUtils.removeLastChar(apiBaseURL, '/') + '/';        this.apiBaseURL = apiBaseURL;    }}