{"hash":"7aa0aca62f0090cb32d06e9fd26dc5f300ce0653","fesm2022":[{"exports":["AuthGuard","SHAuthenticationBaseService","SHAuthenticationInterceptor","ShAuthenticationComponent","ShAuthenticationService","XS_AUTHENTICATION_ROUTE"],"facadeModuleId":"/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/sh-authentication.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/sh-authentication.service.mjs","/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/sh-authentication.component.mjs","/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/api/domain/sh-authentication.mjs","/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/api/constant/sh-authentication-constant.mjs","/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/api/services/sh-authentication-base.service.mjs","/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/api/guard/sh-authentication-guard.mjs","/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/api/interceptor/sh-authentication.interceptor.mjs","/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/public-api.mjs","/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/sh-authentication.mjs"],"name":"sh-authentication","type":"chunk","dynamicImports":[],"fileName":"sh-authentication.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","Injectable","Component"],"@sh/base":["SHUtils","*"],"@angular/router":["*"]},"imports":["@angular/core","@sh/base","@angular/router"],"modules":{"/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/sh-authentication.service.mjs":{"code":"class ShAuthenticationService {\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: ShAuthenticationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: ShAuthenticationService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: ShAuthenticationService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [] });","originalLength":1526,"removedExports":[],"renderedExports":["ShAuthenticationService"],"renderedLength":671},"/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/sh-authentication.component.mjs":{"code":"class ShAuthenticationComponent {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: ShAuthenticationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.8\", type: ShAuthenticationComponent, isStandalone: true, selector: \"lib-sh-authentication\", ngImport: i0, template: `\n    <p>\n      sh-authentication works!\n    </p>\n  `, isInline: true, styles: [\"\"] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: ShAuthenticationComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'lib-sh-authentication', standalone: true, imports: [], template: `\n    <p>\n      sh-authentication works!\n    </p>\n  ` }]\n        }] });","originalLength":1850,"removedExports":[],"renderedExports":["ShAuthenticationComponent"],"renderedLength":832},"/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/api/domain/sh-authentication.mjs":{"code":"const XS_AUTHENTICATION_ROUTE = {\n    login: 'login',\n    forgotPassword: 'forgot-password',\n    forgotPINCode: 'forgot-pin-code',\n    help: 'help'\n};","originalLength":1992,"removedExports":[],"renderedExports":["XS_AUTHENTICATION_ROUTE"],"renderedLength":150},"/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/api/constant/sh-authentication-constant.mjs":{"code":"const XS_STORAGE_KEY_TOKEN = 'token';\nconst XS_STORAGE_KEY_TOKEN_EXPIRATION = 'tokenExpiration';\nconst XS_STORAGE_KEY_USER = 'user';\nconst XS_STORAGE_KEY_USERNAME = 'username';\nconst XS_STORAGE_KEY_LANGUAGE = 'language';\nconst XS_STORAGE_KEY_DOMAIN_ID = 'domainID';\nconst XS_STORAGE_KEY_DOMAIN_NAME = 'domainName';\nconst TOKEN_HEADER_KEY = 'Authorization';","originalLength":1855,"removedExports":[],"renderedExports":["XS_STORAGE_KEY_TOKEN","XS_STORAGE_KEY_TOKEN_EXPIRATION","XS_STORAGE_KEY_USER","XS_STORAGE_KEY_USERNAME","XS_STORAGE_KEY_LANGUAGE","XS_STORAGE_KEY_DOMAIN_ID","XS_STORAGE_KEY_DOMAIN_NAME","TOKEN_HEADER_KEY"],"renderedLength":356},"/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/api/services/sh-authentication-base.service.mjs":{"code":"class SHAuthenticationBaseService {\n    http;\n    router;\n    token;\n    loggedInUsername;\n    constructor(http, router) {\n        this.http = http;\n        this.router = router;\n    }\n    login(request) {\n        console.log(\" ===| Login function call from authentication library service |===\");\n        return this.http.post(this.getEndpoint().login, request);\n    }\n    register(user) {\n        return this.http.post(this.getEndpoint().register, user);\n    }\n    logOut() {\n        this.token = undefined;\n        this.loggedInUsername = undefined;\n        localStorage.removeItem(XS_STORAGE_KEY_USER);\n        // localStorage.removeItem('token');\n        sessionStorage.removeItem(XS_STORAGE_KEY_TOKEN);\n        localStorage.removeItem(XS_STORAGE_KEY_USER);\n        this.router.navigate([this.getRoute().login]).then();\n    }\n    saveToken(token) {\n        this.token = token;\n        this.loggedInUsername = undefined;\n        // localStorage.setItem('token', token);\n        sessionStorage.setItem(XS_STORAGE_KEY_TOKEN, token);\n    }\n    addUserToLocalStorage(user) {\n        localStorage.setItem(XS_STORAGE_KEY_USER, JSON.stringify(user));\n    }\n    getUserFromLocalStorage() {\n        return !SHUtils.isEmpty(localStorage.getItem(XS_STORAGE_KEY_USER)) ? JSON.parse(localStorage.getItem('user')) : undefined;\n    }\n    loadToken() {\n        // this.token = localStorage.getItem('token');\n        if (!SHUtils.isEmpty(sessionStorage.getItem(XS_STORAGE_KEY_TOKEN)))\n            this.token = sessionStorage.getItem('token');\n    }\n    getToken() {\n        return this.token;\n    }\n    isAuthenticate() {\n        this.loadToken();\n        // if (!SHUtils.isEmpty(this.token)) {\n        //   if (!SHUtils.isEmpty(jwt_decode(this.token!).sub)) {\n        //       this.loggedInUsername = jwt_decode(this.token!)!;\n        //       return true;\n        //     }\n        //   }\n        this.logOut();\n        return false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationBaseService, deps: [{ token: i1.SHttpClientService }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationBaseService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationBaseService, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i1.SHttpClientService }, { type: i2.Router }] });","originalLength":9476,"removedExports":[],"renderedExports":["SHAuthenticationBaseService"],"renderedLength":2562},"/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/api/guard/sh-authentication-guard.mjs":{"code":"class AuthGuard {\n    authenticationService;\n    router;\n    constructor(authenticationService, router) {\n        this.authenticationService = authenticationService;\n        this.router = router;\n    }\n    canActivate() {\n        return this.isUserLoggedIn();\n    }\n    isUserLoggedIn() {\n        if (this.authenticationService.isAuthenticate())\n            return true;\n        this.router.navigate(['/login']);\n        throw new Error('vous devez vous connectez pour avoir accés au système');\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: AuthGuard, deps: [{ token: SHAuthenticationBaseService }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: AuthGuard, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: AuthGuard, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: SHAuthenticationBaseService }, { type: i2.Router }] });","originalLength":3389,"removedExports":[],"renderedExports":["AuthGuard"],"renderedLength":1195},"/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/lib/api/interceptor/sh-authentication.interceptor.mjs":{"code":"class SHAuthenticationInterceptor {\n    authenticationService;\n    constructor(authenticationService) {\n        this.authenticationService = authenticationService;\n    }\n    intercept(httpRequest, httpHandler) {\n        this.authenticationService.loadToken();\n        const token = this.authenticationService.getToken();\n        const request = httpRequest.clone({ setHeaders: { Authorization: `Bearer ${token}` } });\n        return httpHandler.handle(request);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationInterceptor, deps: [{ token: SHAuthenticationBaseService }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationInterceptor });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: SHAuthenticationBaseService }] });","originalLength":3303,"removedExports":[],"renderedExports":["SHAuthenticationInterceptor"],"renderedLength":1072},"/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/public-api.mjs":{"code":"/*\n * Public API Surface of sh-authentication\n */","originalLength":1677,"removedExports":[],"renderedExports":[],"renderedLength":49},"/Users/iroxs/DEV/training/angular/sh-ng-lib/dist/sh-authentication/esm2022/sh-authentication.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":524,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component } from '@angular/core';\nimport * as i1 from '@sh/base';\nimport { SHUtils } from '@sh/base';\nimport * as i2 from '@angular/router';\n\nclass ShAuthenticationService {\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: ShAuthenticationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: ShAuthenticationService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: ShAuthenticationService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [] });\n\nclass ShAuthenticationComponent {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: ShAuthenticationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.8\", type: ShAuthenticationComponent, isStandalone: true, selector: \"lib-sh-authentication\", ngImport: i0, template: `\n    <p>\n      sh-authentication works!\n    </p>\n  `, isInline: true, styles: [\"\"] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: ShAuthenticationComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'lib-sh-authentication', standalone: true, imports: [], template: `\n    <p>\n      sh-authentication works!\n    </p>\n  ` }]\n        }] });\n\nconst XS_AUTHENTICATION_ROUTE = {\n    login: 'login',\n    forgotPassword: 'forgot-password',\n    forgotPINCode: 'forgot-pin-code',\n    help: 'help'\n};\n\nconst XS_STORAGE_KEY_TOKEN = 'token';\nconst XS_STORAGE_KEY_TOKEN_EXPIRATION = 'tokenExpiration';\nconst XS_STORAGE_KEY_USER = 'user';\nconst XS_STORAGE_KEY_USERNAME = 'username';\nconst XS_STORAGE_KEY_LANGUAGE = 'language';\nconst XS_STORAGE_KEY_DOMAIN_ID = 'domainID';\nconst XS_STORAGE_KEY_DOMAIN_NAME = 'domainName';\nconst TOKEN_HEADER_KEY = 'Authorization';\n\nclass SHAuthenticationBaseService {\n    http;\n    router;\n    token;\n    loggedInUsername;\n    constructor(http, router) {\n        this.http = http;\n        this.router = router;\n    }\n    login(request) {\n        console.log(\" ===| Login function call from authentication library service |===\");\n        return this.http.post(this.getEndpoint().login, request);\n    }\n    register(user) {\n        return this.http.post(this.getEndpoint().register, user);\n    }\n    logOut() {\n        this.token = undefined;\n        this.loggedInUsername = undefined;\n        localStorage.removeItem(XS_STORAGE_KEY_USER);\n        // localStorage.removeItem('token');\n        sessionStorage.removeItem(XS_STORAGE_KEY_TOKEN);\n        localStorage.removeItem(XS_STORAGE_KEY_USER);\n        this.router.navigate([this.getRoute().login]).then();\n    }\n    saveToken(token) {\n        this.token = token;\n        this.loggedInUsername = undefined;\n        // localStorage.setItem('token', token);\n        sessionStorage.setItem(XS_STORAGE_KEY_TOKEN, token);\n    }\n    addUserToLocalStorage(user) {\n        localStorage.setItem(XS_STORAGE_KEY_USER, JSON.stringify(user));\n    }\n    getUserFromLocalStorage() {\n        return !SHUtils.isEmpty(localStorage.getItem(XS_STORAGE_KEY_USER)) ? JSON.parse(localStorage.getItem('user')) : undefined;\n    }\n    loadToken() {\n        // this.token = localStorage.getItem('token');\n        if (!SHUtils.isEmpty(sessionStorage.getItem(XS_STORAGE_KEY_TOKEN)))\n            this.token = sessionStorage.getItem('token');\n    }\n    getToken() {\n        return this.token;\n    }\n    isAuthenticate() {\n        this.loadToken();\n        // if (!SHUtils.isEmpty(this.token)) {\n        //   if (!SHUtils.isEmpty(jwt_decode(this.token!).sub)) {\n        //       this.loggedInUsername = jwt_decode(this.token!)!;\n        //       return true;\n        //     }\n        //   }\n        this.logOut();\n        return false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationBaseService, deps: [{ token: i1.SHttpClientService }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationBaseService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationBaseService, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i1.SHttpClientService }, { type: i2.Router }] });\n\nclass AuthGuard {\n    authenticationService;\n    router;\n    constructor(authenticationService, router) {\n        this.authenticationService = authenticationService;\n        this.router = router;\n    }\n    canActivate() {\n        return this.isUserLoggedIn();\n    }\n    isUserLoggedIn() {\n        if (this.authenticationService.isAuthenticate())\n            return true;\n        this.router.navigate(['/login']);\n        throw new Error('vous devez vous connectez pour avoir accés au système');\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: AuthGuard, deps: [{ token: SHAuthenticationBaseService }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: AuthGuard, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: AuthGuard, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: SHAuthenticationBaseService }, { type: i2.Router }] });\n\nclass SHAuthenticationInterceptor {\n    authenticationService;\n    constructor(authenticationService) {\n        this.authenticationService = authenticationService;\n    }\n    intercept(httpRequest, httpHandler) {\n        this.authenticationService.loadToken();\n        const token = this.authenticationService.getToken();\n        const request = httpRequest.clone({ setHeaders: { Authorization: `Bearer ${token}` } });\n        return httpHandler.handle(request);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationInterceptor, deps: [{ token: SHAuthenticationBaseService }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationInterceptor });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: SHAuthenticationInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: SHAuthenticationBaseService }] });\n\n/*\n * Public API Surface of sh-authentication\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AuthGuard, SHAuthenticationBaseService, SHAuthenticationInterceptor, ShAuthenticationComponent, ShAuthenticationService, XS_AUTHENTICATION_ROUTE };\n//# sourceMappingURL=sh-authentication.mjs.map\n","map":null,"preliminaryFileName":"sh-authentication.mjs","sourcemapFileName":"sh-authentication.mjs.map"},{"fileName":"sh-authentication.mjs.map","needsCodeReference":false,"originalFileName":null,"source":"{\"version\":3,\"file\":\"sh-authentication.mjs\",\"sources\":[\"../../../projects/sh-authentication/src/lib/sh-authentication.service.ts\",\"../../../projects/sh-authentication/src/lib/sh-authentication.component.ts\",\"../../../projects/sh-authentication/src/lib/api/domain/sh-authentication.ts\",\"../../../projects/sh-authentication/src/lib/api/constant/sh-authentication-constant.ts\",\"../../../projects/sh-authentication/src/lib/api/services/sh-authentication-base.service.ts\",\"../../../projects/sh-authentication/src/lib/api/guard/sh-authentication-guard.ts\",\"../../../projects/sh-authentication/src/lib/api/interceptor/sh-authentication.interceptor.ts\",\"../../../projects/sh-authentication/src/public-api.ts\",\"../../../projects/sh-authentication/src/sh-authentication.ts\"],\"sourcesContent\":[\"import { Injectable } from '@angular/core';\\n\\n@Injectable({\\n  providedIn: 'root'\\n})\\nexport class ShAuthenticationService {\\n\\n  constructor() { }\\n}\\n\",\"import { Component } from '@angular/core';\\n\\n@Component({\\n  selector: 'lib-sh-authentication',\\n  standalone: true,\\n  imports: [],\\n  template: `\\n    <p>\\n      sh-authentication works!\\n    </p>\\n  `,\\n  styles: ``\\n})\\nexport class ShAuthenticationComponent {\\n\\n}\\n\",\"import {SHUserPartial} from '@sh/base';\\r\\rexport interface SHAuthenticationRoute {\\r    dashboard: string;\\r    base: string;\\r    login: string;\\r    forgotPassword: string;\\r    updatePasswordRequired: string;\\r    help: string;\\r}\\r\\rexport interface SHAuthenticationEndpoint {\\r    register: string;\\r    login: string;\\r    logout: string;\\r    verifyUsername: string;\\r    sendVerificationCode: string;\\r    validateVerificationCode: string;\\r    resetPassword: string;\\r    updatePassword: string;\\r    verifyPassword: string;\\r}\\r\\rexport const XS_AUTHENTICATION_ROUTE = {\\r    login: 'login',\\r    forgotPassword: 'forgot-password',\\r    forgotPINCode: 'forgot-pin-code',\\r    help: 'help'\\r};\\r\\rexport interface XSAuthenticationStorage {\\r    token?: string;\\r    tokenExpiration?: string;\\r    user?: SHUserPartial;\\r    username?: string;\\r    domainID?: string;\\r    domainName?: string;\\r    mode?: XSAuthenticationMode;\\r}\\r\\rexport type XSAuthenticationMode = 'password' | 'pinCode';\\r\",\"export const XS_STORAGE_KEY_TOKEN: string = 'token';\\rexport const XS_STORAGE_KEY_TOKEN_EXPIRATION: string = 'tokenExpiration';\\rexport const XS_STORAGE_KEY_USER: string = 'user';\\rexport const XS_STORAGE_KEY_USERNAME: string = 'username';\\rexport const XS_STORAGE_KEY_LANGUAGE: string = 'language';\\rexport const XS_STORAGE_KEY_DOMAIN_ID: string = 'domainID';\\rexport const XS_STORAGE_KEY_DOMAIN_NAME: string = 'domainName';\\rexport const TOKEN_HEADER_KEY = 'Authorization';\",\"import {HttpResponse } from '@angular/common/http'\\nimport { Observable } from 'rxjs';\\nimport {SHAuthenticationEndpoint, SHAuthenticationRoute} from '../domain/sh-authentication';\\nimport {SHUser, SHUtils,SHttpClientService, SHAuthenticationUsernamePasswordRequest, XSAuthenticationPINCodeRequest} from '@sh/base';\\nimport {Router} from '@angular/router';\\nimport {XS_STORAGE_KEY_TOKEN, XS_STORAGE_KEY_USER} from '../constant/sh-authentication-constant';\\nimport {Injectable} from '@angular/core';\\n\\n@Injectable()\\nexport abstract class SHAuthenticationBaseService {\\n\\n  private token?: string;\\n  private loggedInUsername?: string;\\n\\n  public abstract getEndpoint(): SHAuthenticationEndpoint;\\n  public abstract getRoute(): SHAuthenticationRoute;\\n\\n  constructor(protected http: SHttpClientService, protected router: Router) { }\\n\\n  public login(request: SHAuthenticationUsernamePasswordRequest | XSAuthenticationPINCodeRequest): Observable<HttpResponse<SHUser>> {\\n    console.log(\\\" ===| Login function call from authentication library service |===\\\");\\n    return this.http.post<HttpResponse<SHUser>>(this.getEndpoint().login, request);\\n  }\\n\\n  public register(user: SHUser): Observable<HttpResponse<SHUser>> {\\n    return this.http.post<HttpResponse<SHUser>>(this.getEndpoint().register, user);\\n  }\\n\\n  public logOut(): void {\\n    this.token = undefined;\\n    this.loggedInUsername = undefined;\\n    localStorage.removeItem(XS_STORAGE_KEY_USER);\\n    // localStorage.removeItem('token');\\n    sessionStorage.removeItem(XS_STORAGE_KEY_TOKEN);\\n    localStorage.removeItem(XS_STORAGE_KEY_USER);\\n    this.router.navigate([this.getRoute().login]).then();\\n\\n  }\\n\\n  public saveToken(token: string): void {\\n    this.token = token;\\n    this.loggedInUsername = undefined;\\n    // localStorage.setItem('token', token);\\n    sessionStorage.setItem(XS_STORAGE_KEY_TOKEN, token);\\n  }\\n\\n  public addUserToLocalStorage(user: SHUser): void {\\n    localStorage.setItem(XS_STORAGE_KEY_USER, JSON.stringify(user));\\n  }\\n\\n  public getUserFromLocalStorage(): SHUser | undefined {\\n    return !SHUtils.isEmpty(localStorage.getItem(XS_STORAGE_KEY_USER)) ? JSON.parse(localStorage.getItem('user')!) :  undefined;\\n  }\\n\\n  public loadToken(): void {\\n    // this.token = localStorage.getItem('token');\\n    if(!SHUtils.isEmpty(sessionStorage.getItem(XS_STORAGE_KEY_TOKEN)))  this.token = sessionStorage.getItem('token')!;\\n  }\\n\\n  public getToken(): string | undefined {\\n    return this.token;\\n  }\\n\\n  public isAuthenticate(): boolean {\\n    this.loadToken()\\n    // if (!SHUtils.isEmpty(this.token)) {\\n    //   if (!SHUtils.isEmpty(jwt_decode(this.token!).sub)) {\\n    //       this.loggedInUsername = jwt_decode(this.token!)!;\\n    //       return true;\\n    //     }\\n    //   }\\n\\n      this.logOut();\\n      return false;\\n  }\\n}\\n\",\"import { Injectable } from '@angular/core';\\rimport {CanActivate, Router} from '@angular/router';\\rimport {SHAuthenticationBaseService} from '../services/sh-authentication-base.service';\\r\\r@Injectable({\\r    providedIn: 'root',\\r})\\rexport class AuthGuard implements CanActivate {\\r    constructor(\\r        public authenticationService: SHAuthenticationBaseService,\\r        public router: Router,\\r    ) {}\\r\\r    canActivate():boolean {\\r        return this.isUserLoggedIn();\\r    }\\r\\r    private isUserLoggedIn():boolean {\\r        if (this.authenticationService.isAuthenticate()) return true;\\r\\r        this.router.navigate(['/login']);\\r        throw new Error('vous devez vous connectez pour avoir accés au système')\\r    }\\r}\",\"import { Injectable } from '@angular/core';\\rimport {HttpRequest, HttpHandler, HttpEvent, HttpInterceptor} from '@angular/common/http';\\rimport { Observable } from 'rxjs';\\rimport {SHAuthenticationBaseService} from '../services/sh-authentication-base.service';\\r\\r@Injectable()\\rexport class SHAuthenticationInterceptor implements HttpInterceptor {\\r\\r    constructor(private authenticationService: SHAuthenticationBaseService) {}\\r\\r    intercept(httpRequest: HttpRequest<any>, httpHandler: HttpHandler): Observable<HttpEvent<any>> {\\r        this.authenticationService.loadToken();\\r        const token = this.authenticationService.getToken();\\r        const request = httpRequest.clone({setHeaders : {Authorization : `Bearer ${token}` }});\\r\\r        return httpHandler.handle(request);\\r    }\\r}\",\"/*\\n * Public API Surface of sh-authentication\\n */\\n\\nexport * from './lib/sh-authentication.service';\\nexport * from './lib/sh-authentication.component';\\n\\n// --- domains ---\\nexport * from './lib/api/domain/sh-authentication';\\n\\n// --- services ---\\nexport * from './lib/api/services/sh-authentication-base.service';\\n\\n// --- guard ---\\nexport * from './lib/api/guard/sh-authentication-guard';\\n\\n// --- interceptors ---\\nexport * from './lib/api/interceptor/sh-authentication.interceptor';\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[\"i1.SHAuthenticationBaseService\"],\"mappings\":\"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\"}","type":"asset"}]}